name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (staging or production)'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.9'
  DOCKER_IMAGE: ghcr.io/${{ github.repository_owner }}/socialmedia-automation:${{ github.sha }}
  
# Default environment variables for all jobs
defaults:
  run:
    working-directory: ./socialmedia-automation

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        pip install black flake8 isort
        black --check .
        flake8 .
        isort --check-only .
    
    - name: Run unit tests
      env:
        TEST_DATABASE_URL: postgresql://test:test@localhost:5432/testdb
        REDIS_URL: redis://localhost:6379/1
      run: |
        pytest tests/unit -v --cov=automation_stack --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  build:
    name: Build and Push Docker Image
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}
          ghcr.io/${{ github.repository_owner }}/socialmedia-automation:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: [test, build]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /opt/socialmedia
          git fetch origin develop
          git reset --hard origin/develop
          ./deploy.sh staging
    
    - name: Run smoke tests
      uses: wei/curl@v1.1.1
      with:
        args: ${{ secrets.STAGING_URL }}/health
      env:
        CURL_HEADERS: '{"Accept": "application/json"}'

  deploy-production:
    name: Deploy to Production
    needs: [test, build, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /opt/socialmedia
          git fetch origin main
          git reset --hard origin/main
          ./deploy.sh production
    
    - name: Run smoke tests
      uses: wei/curl@v1.1.1
      with:
        args: ${{ secrets.PRODUCTION_URL }}/health
      env:
        CURL_HEADERS: '{"Accept": "application/json"}'
    
    - name: Send deployment notification
      if: always()
      uses: rtCamp/action-slack-notify@v2.2.0
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_TITLE: "Production Deployment ${{ job.status }}"
        SLACK_MESSAGE: "Deployment of ${{ github.sha }} to production ${{ job.status }}.\nCommit: ${{ github.event.head_commit.message }}\nBy: ${{ github.actor }}"
        SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
